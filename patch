#!/usr/bin/env bash

DIR="$( cd "$( dirname $(readlink "${BASH_SOURCE[0]}" ) )" >/dev/null && pwd )"

binary=
libc_ver=

usage() {
    echo "Usage: $0 -f <binary_to_patch> -l <libc_to_patch>" >&2
    exit 1
}

while getopts ":f:l:" opt; do
    case "$opt" in
        f)
            binary="${OPTARG}"
            ;;
        l)
            libc_ver="${OPTARG}"
            ;;
        *)
            usage
            ;;
    esac
done

if [[ -z "${binary}" ]] || [[ -z "${libc_ver}" ]]; then
    usage
fi

deb_url=$(grep "${libc_ver}" "${DIR}/support/listing")

if [[ -z "${deb_url}" ]]; then
    echo "[!] Failed to find a relevant .deb" >&2
    exit 1
elif [[ "$(echo -n ${deb_url} | grep -c '^')" != "1" ]]; then
    echo "[!] Got multiple candidates for .deb" >&2
    echo "${deb_url}"
    exit 1
fi

echo "[+] Found .deb @ ${deb_url}, downloading into libc-patch/"

mkdir -p libc-patch
rm -rf libc-patch/*

wget -O libc-patch/${libc_ver}.deb "${deb_url}"
wget -O libc-patch/${libc_ver}.dbg.deb "$(echo ${deb_url} | sed 's/libc6/libc6-dbg/')"

if [[ ! $? == "0" ]]; then
    echo "[!] Failed to download deb"
    exit 1
fi

pushd libc-patch > /dev/null 2>&1 

dpkg-deb --extract ${libc_ver}.deb .
dpkg-deb --extract ${libc_ver}.dbg.deb .

echo "[+] Extracted debs, readding debug symbols.."

# Liberal use of find for max ceebs
eu-unstrip $(find lib -name "libc-*.so") $(find usr -name "libc-*.so") -o $(find lib -name "libc-*.so")

popd > /dev/null 2>&1

echo "[+] Creating backup and patching binary"

cp -v $binary "${binary}-patched"

patchelf --set-interpreter $(find libc-patch/lib -name "ld-*.so") \
    --set-rpath $(dirname $(find libc-patch/lib -name "ld-*.so")) "${binary}-patched" && echo "[+] Binary patched"
